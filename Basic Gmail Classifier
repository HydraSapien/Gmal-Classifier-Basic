import os.path
import base64
import json
import os
import pickle
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from collections import defaultdict

# If modifying these SCOPES, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

def authenticate_gmail():
    """Shows basic usage of the Gmail API.
    Lists the user's Gmail labels.
    """
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token.json', 'w') as token:
            token.write(creds.to_json())
    return creds

def get_unread_emails(service):
    results = service.users().messages().list(userId='me', labelIds=['UNREAD']).execute()
    messages = results.get('messages', [])
    return messages

def get_message_details(service, msg_id):
    message = service.users().messages().get(userId='me', id=msg_id).execute()
    headers = message['payload']['headers']
    for header in headers:
        if header['name'] == 'From':
            sender = header['value']
            break
    return sender

def create_report(unread_emails):
    report = defaultdict(int)
    for sender in unread_emails:
        report[sender] += 1
    return report

def main():
    creds = authenticate_gmail()
    service = build('gmail', 'v1', credentials=creds)

    unread_emails = get_unread_emails(service)
    email_senders = []

    for email in unread_emails:
        msg_id = email['id']
        sender = get_message_details(service, msg_id)
        email_senders.append(sender)

    report = create_report(email_senders)

    print("Unread Emails Report by Sender:")
    for sender, count in report.items():
        print(f"{sender}: {count} unread emails")

if __name__ == '__main__':
    main()
